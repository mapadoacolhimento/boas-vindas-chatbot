generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema", "prismaSchemaFolder"]
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["iana", "match", "mobilization", "msr", "pii_sec", "public", "public_services"]
}

model busara_ab_experiment {
  busara_ab_experiment_id Int    @id @default(autoincrement())
  match_id                Int?
  support_request_id      Int
  msr_id                  BigInt
  transactional_id        String @db.VarChar(50)

  @@schema("match")
}

model busara_hashes {
  msr_email String @id @db.VarChar(254)
  hash      String @db.VarChar(1000)

  @@schema("match")
}

model feature_flag {
  id              BigInt  @id @default(autoincrement())
  feature_enabled Boolean @default(false)
  feature_name    String  @unique

  @@schema("match")
}

model match_confirmation_status_history {
  match_confirmation_status_history_id Int                       @id @default(autoincrement())
  match_confirmation_id                Int
  status                               match_confirmation_status
  created_at                           DateTime                  @default(now()) @db.Timestamp(6)
  match_confirmations                  match_confirmations       @relation(fields: [match_confirmation_id], references: [match_confirmation_id])

  @@schema("match")
}

model match_confirmations {
  match_confirmation_id             Int                                 @id @default(autoincrement())
  support_request_id                Int
  msr_id                            BigInt
  volunteer_id                      Int
  status                            match_confirmation_status
  match_id                          Int?
  created_at                        DateTime                            @default(now()) @db.Timestamp(6)
  updated_at                        DateTime                            @db.Timestamp(6)
  match_stage                       match_stage
  match_type                        match_type
  match_confirmation_status_history match_confirmation_status_history[]
  support_requests                  support_requests                    @relation(fields: [support_request_id], references: [support_request_id])

  @@schema("match")
}

model match_status_history {
  match_status_history_id Int          @id @default(autoincrement())
  match_id                Int
  status                  match_status
  created_at              DateTime     @default(now()) @db.Timestamp(6)
  matches                 matches      @relation(fields: [match_id], references: [match_id])

  @@schema("match")
}

model match_surveys {
  match_survey_id Int         @id @default(autoincrement())
  match_id        Int
  created_at      DateTime    @default(now()) @db.Timestamp(6)
  updated_at      DateTime    @db.Timestamp(6)
  survey_type     survey_type
  matches         matches     @relation(fields: [match_id], references: [match_id])

  @@schema("match")
}

model matches {
  match_id                    Int                    @id @default(autoincrement())
  support_request_id          Int
  msr_id                      BigInt
  volunteer_id                Int?
  msr_zendesk_ticket_id       BigInt
  volunteer_zendesk_ticket_id BigInt?
  support_type                support_type
  match_type                  match_type
  match_stage                 match_stage
  status                      match_status
  created_at                  DateTime               @default(now()) @db.Timestamp(6)
  updated_at                  DateTime               @db.Timestamp(6)
  match_status_history        match_status_history[]
  match_surveys               match_surveys[]
  support_requests            support_requests       @relation(fields: [support_request_id], references: [support_request_id])
  volunteers                  volunteers?            @relation(fields: [volunteer_id], references: [id])

  @@schema("match")
}

model support_request_status_history {
  support_request_status_history_id Int                     @id @default(autoincrement())
  support_request_id                Int
  status                            support_requests_status
  created_at                        DateTime                @default(now()) @db.Timestamp(6)
  support_requests                  support_requests        @relation(fields: [support_request_id], references: [support_request_id])

  @@schema("match")
}

model support_requests {
  support_request_id             Int                              @id @default(autoincrement())
  msr_id                         BigInt
  zendesk_ticket_id              BigInt                           @unique
  support_type                   support_type
  support_expertise              String?
  priority                       Int?
  has_disability                 Boolean?
  requires_libras                Boolean?
  accepts_online_support         Boolean
  lat                            Decimal?                         @db.Decimal(10, 4)
  lng                            Decimal?                         @db.Decimal(10, 4)
  city                           String?
  state                          String?
  status                         support_requests_status
  created_at                     DateTime                         @default(now()) @db.Timestamp(6)
  updated_at                     DateTime                         @db.Timestamp(6)
  match_confirmations            match_confirmations[]
  matches                        matches[]
  support_request_status_history support_request_status_history[]

  @@schema("match")
}

model multiplier_journey_events {
  multiplier_journey_event_id Int                      @id @default(autoincrement())
  multiplier_id               Int
  event                       multiplier_journey_event
  created_at                  DateTime                 @default(now()) @db.Timestamp(6)
  multipliers                 multipliers              @relation(fields: [multiplier_id], references: [multiplier_id])

  @@schema("mobilization")
}

model multiplier_pii {
  multiplier_pii_id Int         @id @default(autoincrement())
  multiplier_id     Int         @unique
  email             String      @db.VarChar(254)
  first_name        String      @db.VarChar(200)
  last_name         String      @db.VarChar(400)
  phone             String      @db.VarChar(100)
  zip_code          String      @db.VarChar(9)
  created_at        DateTime    @default(now()) @db.Timestamp(6)
  updated_at        DateTime    @db.Timestamp(6)
  multipliers       multipliers @relation(fields: [multiplier_id], references: [multiplier_id])

  @@schema("mobilization")
}

model multiplier_registration_open_questions {
  multiplier_registration_open_questions_id Int         @id @default(autoincrement())
  multiplier_id                             Int         @unique
  university_name                           String      @db.VarChar(200)
  university_course                         String      @db.VarChar(200)
  how_she_heard_about_us                    String
  reasons_for_participating                 String
  multipliers                               multipliers @relation(fields: [multiplier_id], references: [multiplier_id])

  @@schema("mobilization")
}

model multipliers {
  multiplier_id                          Int                                     @id @default(autoincrement())
  gender                                 gender
  age                                    Int
  region                                 region
  state                                  String                                  @db.VarChar(9)
  race                                   race
  sexuality                              sexuality
  religion                               religion
  has_disability                         Boolean
  has_internet_access                    Boolean
  is_available                           Boolean
  education_level                        education_level
  is_university_student                  Boolean
  university_type                        multiplier_university_type
  created_at                             DateTime                                @default(now()) @db.Timestamp(6)
  updated_at                             DateTime                                @db.Timestamp(6)
  shift_availability                     String[]
  city                                   String                                  @default("not_found") @db.VarChar(100)
  disability_type                        String[]                                @default([])
  has_children                           Boolean?
  household_type                         multiplier_household_type               @default(not_found)
  how_many_children                      Int?
  multiplier_journey_events              multiplier_journey_events[]
  multiplier_pii                         multiplier_pii?
  multiplier_registration_open_questions multiplier_registration_open_questions?

  @@schema("mobilization")
}

model msr_status_history {
  msr_status_history_id Int        @id @default(autoincrement())
  msr_id                BigInt
  status                msr_status
  created_at            DateTime   @default(now()) @db.Timestamp(6)
  msrs                  msrs       @relation(fields: [msr_id], references: [msr_id])

  @@schema("msr")
}

model msrs {
  msr_id                 BigInt               @id @default(autoincrement())
  gender                 gender
  race_color             race
  has_disability         Boolean?
  accepts_online_support Boolean?
  zipcode                String               @db.VarChar(9)
  neighborhood           String               @db.VarChar(100)
  city                   String               @db.VarChar(100)
  state                  String               @db.VarChar(9)
  status                 msr_status
  created_at             DateTime             @default(now()) @db.Timestamp(6)
  updated_at             DateTime             @db.Timestamp(6)
  msr_status_history     msr_status_history[]
  msr_pii                msr_pii?

  @@schema("msr")
}

model msr_pii {
  msr_id        BigInt    @id @default(autoincrement())
  first_name    String?   @db.VarChar(200)
  email         String    @unique @db.VarChar(254)
  phone         String    @db.VarChar(100)
  created_at    DateTime  @default(now()) @db.Timestamp(6)
  updated_at    DateTime  @db.Timestamp(6)
  date_of_birth DateTime? @db.Date
  msrs          msrs      @relation(fields: [msr_id], references: [msr_id])

  @@schema("pii_sec")
}

model auth_group {
  id                     Int                      @id @default(autoincrement())
  name                   String                   @unique @db.VarChar(150)
  auth_group_permissions auth_group_permissions[]
  auth_user_groups       auth_user_groups[]

  @@index([name], map: "auth_group_name_a6ea08ec_like")
  @@schema("public")
}

model auth_group_permissions {
  id              BigInt          @id @default(autoincrement())
  group_id        Int
  permission_id   Int
  auth_permission auth_permission @relation(fields: [permission_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_group_permissio_permission_id_84c5c92e_fk_auth_perm")
  auth_group      auth_group      @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_group_permissions_group_id_b120cbf9_fk_auth_group_id")

  @@unique([group_id, permission_id], map: "auth_group_permissions_group_id_permission_id_0cd325b0_uniq")
  @@index([group_id], map: "auth_group_permissions_group_id_b120cbf9")
  @@index([permission_id], map: "auth_group_permissions_permission_id_84c5c92e")
  @@schema("public")
}

model auth_permission {
  id                         Int                          @id @default(autoincrement())
  name                       String                       @db.VarChar(255)
  content_type_id            Int
  codename                   String                       @db.VarChar(100)
  auth_group_permissions     auth_group_permissions[]
  django_content_type        django_content_type          @relation(fields: [content_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_permission_content_type_id_2f476e4b_fk_django_co")
  auth_user_user_permissions auth_user_user_permissions[]

  @@unique([content_type_id, codename], map: "auth_permission_content_type_id_codename_01ab375a_uniq")
  @@index([content_type_id], map: "auth_permission_content_type_id_2f476e4b")
  @@schema("public")
}

model auth_user {
  id                         Int                          @id @default(autoincrement())
  password                   String                       @db.VarChar(128)
  last_login                 DateTime?                    @db.Timestamptz(6)
  is_superuser               Boolean
  username                   String                       @unique @db.VarChar(150)
  first_name                 String                       @db.VarChar(150)
  last_name                  String                       @db.VarChar(150)
  email                      String                       @db.VarChar(254)
  is_staff                   Boolean
  is_active                  Boolean
  date_joined                DateTime                     @db.Timestamptz(6)
  auth_user_groups           auth_user_groups[]
  auth_user_user_permissions auth_user_user_permissions[]
  django_admin_log           django_admin_log[]
  volunteers_formdata        volunteers_formdata?

  @@index([username], map: "auth_user_username_6821ab7c_like")
  @@schema("public")
}

model auth_user_groups {
  id         BigInt     @id @default(autoincrement())
  user_id    Int
  group_id   Int
  auth_group auth_group @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_user_groups_group_id_97559544_fk_auth_group_id")
  auth_user  auth_user  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_user_groups_user_id_6a12ed8b_fk_auth_user_id")

  @@unique([user_id, group_id], map: "auth_user_groups_user_id_group_id_94350c0c_uniq")
  @@index([group_id], map: "auth_user_groups_group_id_97559544")
  @@index([user_id], map: "auth_user_groups_user_id_6a12ed8b")
  @@schema("public")
}

model auth_user_user_permissions {
  id              BigInt          @id @default(autoincrement())
  user_id         Int
  permission_id   Int
  auth_permission auth_permission @relation(fields: [permission_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm")
  auth_user       auth_user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id")

  @@unique([user_id, permission_id], map: "auth_user_user_permissions_user_id_permission_id_14a6b632_uniq")
  @@index([permission_id], map: "auth_user_user_permissions_permission_id_1fbb5f2c")
  @@index([user_id], map: "auth_user_user_permissions_user_id_a95ead1b")
  @@schema("public")
}

model cities {
  city_id    Int      @id @default(autoincrement())
  city_value String   @db.VarChar(100)
  city_label String   @db.VarChar(100)
  state      String   @db.VarChar(2)
  ibge_code  Int
  created_at DateTime @db.Timestamptz(6)
  updated_at DateTime @db.Timestamptz(6)

  @@schema("public")
}

model django_admin_log {
  id                  Int                  @id @default(autoincrement())
  action_time         DateTime             @db.Timestamptz(6)
  object_id           String?
  object_repr         String               @db.VarChar(200)
  action_flag         Int                  @db.SmallInt
  change_message      String
  content_type_id     Int?
  user_id             Int
  django_content_type django_content_type? @relation(fields: [content_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "django_admin_log_content_type_id_c4bce8eb_fk_django_co")
  auth_user           auth_user            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "django_admin_log_user_id_c564eba6_fk_auth_user_id")

  @@index([content_type_id], map: "django_admin_log_content_type_id_c4bce8eb")
  @@index([user_id], map: "django_admin_log_user_id_c564eba6")
  @@schema("public")
}

model django_content_type {
  id               Int                @id @default(autoincrement())
  app_label        String             @db.VarChar(100)
  model            String             @db.VarChar(100)
  auth_permission  auth_permission[]
  django_admin_log django_admin_log[]

  @@unique([app_label, model], map: "django_content_type_app_label_model_76bd3d3b_uniq")
  @@schema("public")
}

model django_migrations {
  id      BigInt   @id @default(autoincrement())
  app     String   @db.VarChar(255)
  name    String   @db.VarChar(255)
  applied DateTime @db.Timestamptz(6)

  @@schema("public")
}

model django_session {
  session_key  String   @id @db.VarChar(40)
  session_data String
  expire_date  DateTime @db.Timestamptz(6)

  @@index([expire_date], map: "django_session_expire_date_a5c62663")
  @@index([session_key], map: "django_session_session_key_c0390e0f_like")
  @@schema("public")
}

model integrations_logs {
  id          BigInt   @id(map: "volunteers_integrationlogs_pkey") @default(autoincrement())
  type        String   @db.VarChar(30)
  created_at  DateTime @db.Timestamptz(6)
  status      String   @db.VarChar(30)
  error       String
  data        Json
  integration String   @db.VarChar(15)
  external_id BigInt?
  form_type   String   @db.VarChar(15)
  internal_id BigInt?

  @@schema("public")
}

model volunteer_availability {
  volunteer_id          Int        @id
  current_matches       Int
  max_matches           Int
  is_available          Boolean
  support_type          String     @db.VarChar(20)
  support_expertise     String     @db.VarChar(200)
  offers_online_support Boolean
  lat                   Decimal?   @db.Decimal(10, 4)
  lng                   Decimal?   @db.Decimal(10, 4)
  city                  String     @db.VarChar(100)
  created_at            DateTime   @db.Timestamptz(6)
  updated_at            DateTime   @db.Timestamptz(6)
  state                 String     @db.VarChar(9)
  offers_libras_support Boolean
  volunteers            volunteers @relation(fields: [volunteer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "volunteer_availability_volunteer_id_ff544bbb_fk_volunteers_id")

  @@schema("public")
}

model volunteer_segments {
  volunteer_segment_id    BigInt     @id @default(autoincrement())
  segment_name            String     @db.VarChar(100)
  volunteer_id            Int
  volunteer_segment_group String     @db.VarChar(100)
  created_at              DateTime   @default(now()) @db.Timestamp(6)
  updated_at              DateTime   @db.Timestamp(6)
  volunteers              volunteers @relation(fields: [volunteer_id], references: [id])

  @@schema("public")
}

model volunteer_status_history {
  id           BigInt     @id @default(autoincrement())
  created_at   DateTime   @default(now()) @db.Timestamptz(6)
  volunteer_id Int
  status       String     @db.VarChar(60)
  volunteers   volunteers @relation(fields: [volunteer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "volunteer_status_history_volunteer_id_d1e0ea8c_fk_volunteers_id")

  @@index([volunteer_id], map: "volunteer_status_history_volunteer_id_d1e0ea8c")
  @@schema("public")
}

model volunteer_training_history {
  volunteer_training_history_id BigInt                   @id @default(autoincrement())
  volunteer_id                  Int
  moodle_user_id                Int
  event                         volunteer_training_event
  created_at                    DateTime                 @default(now()) @db.Timestamp(6)
  volunteers                    volunteers               @relation(fields: [volunteer_id], references: [id])

  @@schema("public")
}

model volunteer_unsubscriptions {
  volunteer_unsubscription_id BigInt     @id @default(autoincrement())
  volunteer_id                Int
  unsubscription_reason       String     @db.VarChar
  unsubscription_description  String
  created_at                  DateTime   @default(now()) @db.Timestamp(6)
  updated_at                  DateTime   @db.Timestamp(6)
  volunteers                  volunteers @relation(fields: [volunteer_id], references: [id])

  @@schema("public")
}

model volunteers {
  id                         Int                          @id(map: "volunteers_volunteer_pkey") @default(autoincrement())
  created_at                 DateTime                     @db.Timestamptz(6)
  updated_at                 DateTime                     @db.Timestamptz(6)
  condition                  String                       @db.VarChar(60)
  first_name                 String                       @db.VarChar(200)
  last_name                  String                       @db.VarChar(200)
  email                      String                       @unique @db.VarChar(254)
  phone                      String                       @db.VarChar(100)
  zipcode                    String                       @db.VarChar(9)
  state                      String                       @db.VarChar(9)
  city                       String                       @db.VarChar(100)
  neighborhood               String                       @db.VarChar(100)
  latitude                   Decimal?                     @db.Decimal(10, 4)
  register_number            String                       @db.VarChar(400)
  birth_date                 DateTime                     @db.Timestamptz(6)
  color                      String                       @db.VarChar(100)
  gender                     String                       @db.VarChar(100)
  modality                   String                       @db.VarChar(100)
  fields_of_work             String
  years_of_experience        String                       @db.VarChar(100)
  approach                   String?                      @db.VarChar(100)
  form_data_id               BigInt?
  moodle_id                  Int?
  availability               Int
  form_entries_id            BigInt?
  longitude                  Decimal?                     @db.Decimal(10, 4)
  occupation                 String                       @db.VarChar(12)
  offers_libras_support      Boolean
  zendesk_user_id            BigInt?
  street                     String?                      @db.VarChar(200)
  matches                    matches[]
  volunteer_availability     volunteer_availability?
  volunteer_segments         volunteer_segments[]
  volunteer_status_history   volunteer_status_history[]
  volunteer_training_history volunteer_training_history[]
  volunteer_unsubscriptions  volunteer_unsubscriptions[]
  volunteers_formdata        volunteers_formdata?         @relation(fields: [form_data_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "volunteers_volunteer_form_data_id_ec6c5a18_fk_volunteer")

  @@index([form_data_id], map: "volunteers_volunteer_form_data_id_ec6c5a18")
  @@schema("public")
}

model volunteers_formdata {
  id          BigInt       @id @default(autoincrement())
  type_form   String       @db.VarChar(10)
  step        Int
  values      Json
  user_id     Int          @unique
  created_at  DateTime     @db.Timestamptz(6)
  total_steps Int
  updated_at  DateTime     @db.Timestamptz(6)
  volunteers  volunteers[]
  auth_user   auth_user    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "volunteers_formdata_user_id_c9262138_fk_auth_user_id")

  @@schema("public")
}

model public_services {
  public_service_id Int      @id @default(autoincrement())
  service_name      String   @db.VarChar(400)
  zipcode           String   @db.VarChar(9)
  address           String   @db.VarChar(400)
  phone             String   @db.VarChar(200)
  email             String   @db.VarChar(400)
  region            String   @db.VarChar(15)
  state             String   @db.VarChar(9)
  city              String   @db.VarChar(100)
  lat               Decimal? @db.Decimal(10, 4)
  lng               Decimal? @db.Decimal(10, 4)
  created_at        DateTime @default(now()) @db.Timestamp(6)
  updated_at        DateTime @db.Timestamp(6)
  service_type      String   @db.VarChar(400)

  @@schema("public_services")
}

model iana_feedback {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamp(6)
  user_id    BigInt
  question   String
  answer     String?

  @@schema("iana")
}

enum match_confirmation_status {
  waiting
  confirmed
  denied
  expired

  @@schema("match")
}

enum match_stage {
  ideal
  expanded
  online
  old
  manual

  @@schema("match")
}

enum match_status {
  completed
  expired
  in_contact
  interrupted_after_support
  interrupted_before_support
  waiting_contact
  started_contact

  @@schema("match")
}

enum match_type {
  msr
  daily
  manual
  old

  @@schema("match")
}

enum support_requests_status {
  open
  matched
  social_worker
  public_service
  duplicated
  closed
  special_case
  public_service_with_social_worker
  scheduled_social_worker
  expired_social_worker
  waiting_for_match
  waiting_for_match_with_priority
  waived
  waiting_for_confirmation

  @@schema("match")
}

enum support_type {
  psychological
  legal

  @@schema("match")
}

enum survey_type {
  triagem_1
  triagem_2
  acompanhamento_1
  acompanhamento_2

  @@schema("match")
}

enum multiplier_household_type {
  urban
  rural
  not_found

  @@schema("mobilization")
}

enum multiplier_journey_event {
  registration
  general_onboarding

  @@schema("mobilization")
}

enum multiplier_university_type {
  public
  private
  not_found

  @@schema("mobilization")
}

enum msr_status {
  registered
  unregistered

  @@schema("msr")
}

enum education_level {
  basic_education
  high_school
  completed_undergraduate
  incomplete_undergraduate
  not_found

  @@schema("public")
}

enum gender {
  cis_woman
  trans_woman
  not_found

  @@schema("public")
}

enum race {
  black
  brown
  indigenous
  yellow
  white
  not_found

  @@schema("public")
}

enum region {
  norte
  nordeste
  centro_oeste
  sudeste
  sul
  not_found

  @@schema("public")
}

enum religion {
  atheist
  candomble
  catholic
  spiritist
  evangelical
  umbanda
  others
  not_found

  @@schema("public")
}

enum sexuality {
  lesbian
  bisexual
  heterosexual
  asexual
  not_found

  @@schema("public")
}

enum volunteer_training_event {
  started_training
  finished_training

  @@schema("public")
}
